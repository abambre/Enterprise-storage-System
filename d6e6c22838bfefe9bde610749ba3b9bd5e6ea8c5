e project had two tracks, Ruby track and Functional JavaScript track. Two developers worked as a pair on each track. The overall development process was divided into 5 Milestones - `Getting Started`, `Feasibility and Requirement Analysis`, `Minimum Viable Product`, `Unit and Integration tests` and `Comparison of Functional and Object Oriented programming`. These milestones cover different phases of development - feasibility analysis, requirement analysis, implementation and Testing. Each of the milestones were assigned many issues that we estimated should essentially be completed in order to move to the next milestone (during the Software Engineering process more issues were added to different Milestones).  Each issue had several labels to represent its type and status. Work on both the coding and the design of test cases started simultaneously. Travis CI was used to test the project continuously. Online platforms like Slack and Google Hangouts were used for project discussions and meetings. In sub sections we discuss in detail out best practices.

#### Github Labels
The Github issues were assigned different labels which depicted the status of the issue (eg,.Needs Review, Awaiting Developer’s Feedback, Merged) and type of the issue (eg,. Question, Report, Bug). Thus the issues were segregated according to their purpose and enabled better communication.

#### Github Pull Requests
Whenever a code merge to the master was needed, a pull request was raised and a label ‘Needs review’ was added to the issue corresponding to the pull request(PR). Each pull request was assigned to a another developer for Code review. Once the code review was done, the code was either merged or a clarification was sought from the developer. If a clarification was sought, the label of the corresponding issue was changed to ‘Awaiting Developer’s Feedback’. Once the feedback was received and the final changes were approved by peers,  the pull request was merged and the label of the corresponding issue was changed to ‘Merged’. This helped to keep track of the current status of issues.

#### Slack and Google Hangouts
Slack - ‘an online platform for team communication’ was used for general discussion about the project and regular meetings for discussion on the progress of the project  were held on Google Hangouts.

## Results & Discussion

### Object Oriented Vs Functional Programming
One of the major challenge for anyone new to programming world is learning the semantics and understanding underneath syntax logic mapping. Once clear with these two hurdles a programmer can explore the specialities/features of the programming language. Some of these challenges are specific of a set of programming paradigms and since we are experimenting with Object Oriented and Functional ways of doing tasks we share some of the initial programming challenges that a programmer face.

Classes, Inheritance, Delegation, Encapsulation and Polymorphism are familiar yet unknown terms to someone new to Object Oriented Programming world. However, given the fact that purpose of terms is somewhat similar to their actual literature meaning, it is not much difficult for a programmer to grasp these concept and start practicing these features.

However, on the contrary if a new programmer is being told to program in lambda Calculus style. We are quite sure he would leave programming forever. The 'actual' challenge of programming in functional style is that humans think in imperative way. Given the fact that our education system make programmers think in Object Oriented way makes programming in Functional way a daunting task. Even writing english language is imperative and that is why humans communicate because its easier and go step-by-step but not derivatively.

Our team has all four Object Oriented Programmers. Two of which decided to stay on Object Oriented track and the other two decided to explore the Functional track. Since, Object Oriented track was familiar to us we would majorly discuss our experience of using Functional paradigm.

Initially, peers in funct