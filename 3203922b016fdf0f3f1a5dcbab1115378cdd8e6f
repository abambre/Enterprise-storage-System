# Project Report

## Introduction

In this project we have compared Object Oriented Programming and Functional Programming Paradigm. In order to draw this comparison we have implemented two equivalent Markdown Parsers, that converts Markdown to HTML, using Ruby (Object Oriented Language) and Functional JavaScript (Functional Language). Our focus throughout the project was to incrementally develop functionality in Agile fashion (using both paradigm) and discuss methodology, learnings, design decisions, and challenges at regular intervals that we can share with the world.

## Background

There has been an ongoing discussion on Object Oriented Programming (OO) vs Functional Programming since a long time now. The history shows that both the paradigms came from different branches of programming language tree. Functional has its own core branch originating with *LISP* and *Lambda Calculus* whereas OO is considered to be an offshoot of the Procedural Programming.

Functional is a Declarative programming paradigm which models computations as the evaluation of mathematical functions whereas OO is an Imperative programming paradigm which is organized around objects and data rather than actions and logic. Functional avoids mutable data and changing states which are the side effects of OO.

Functional programming has functions as first class citizens. Everything is treated as functions. Functions can be called by other functions, functions can be defined inside another functions. Functions are not just used as methods, but also as expressions. Functions can be used to mutate arguments, which is considered normal in the Functional world, but not in OO.

In Object Oriented paradigm, we try to encapsulate every 'noun' as a class, and use instance of it message passing. OO has the concept of

- reuse and inheritance
- message passing to an object
- The principle of blackboxing. which hides the unrelated portion and exposes only the required interface.

Popular functional languages are LISP, Haskell, Functional JS, etc. and popular OO languages are Ruby, Java, etc. In our project, we will be focussing on Ruby (OO) vs Functional JS (Functional).

## Design

### Products
Our final products are two Markdown Parser Implementation, one in Ruby and one in Functional JavaScript, both these are equivalent in terms of functionality.
Both these parsers are open source and hosted on Github. To make these further accessible to masses we have created a RubyGem (Package Manager in the Ruby world) called ‘MarkParser’ which is hosted on the rubygems.org site. Anyone can download and import it to use the Parser. It will produce the equivalent HTML file.
To install

    gem install MarkParser

And, the Functional Mark Parser can be accessed using  `npm`. We created a node package for the mark parser which is published on the npm website and can be downloaded and used by any user. The package includes the functionality of reading a markdown file and converting it into an HTML file. To install it run the following command : 'npm install mark_parser --save'

### The Two Approaches

#### Ruby Based Mark Parser
Ruby is a purely Object Oriented programming language, hence we chose it for the OO track. In this approach we have defined a heirarchy of classes, where classes `BlockElement` and `InlineElement` act as the Base class, these two classes represent two type of HTML elements BlockElements{eg li, ol} and InlineElement{strong, em}. The sub classes like OrderedListElement, ParagraphElement, CodeElement StrongElement, EmphasisElement depending on its type are inherited from one of these classes.

The concept of inheritance helps to keep the core functionality in the Base class and special features in the inherited class. We used the Inheritance to design the structure of Elements. This helped to keep the code organized and structured.
Methods like `add_element`, `render` are abstract methods in the base class and it implementation is defined in the inherited class. For every element that is identified during parsing, a new instance of the Element class in